-- MySQL Script generated by MySQL Workbench
-- Sun May 25 20:50:16 2014
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema LB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `LB` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `LB` ;

-- -----------------------------------------------------
-- Table `LB`.`Bets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LB`.`Bets` (
  `idBets` INT NOT NULL AUTO_INCREMENT,
  `BetName` VARCHAR(45) NULL,
  `PenaltyA` VARCHAR(45) NULL,
  `PenaltyB` VARCHAR(45) NULL,
  `Introduction` VARCHAR(300) NULL,
  `Finish` INT NULL DEFAULT 0,
  `Sum` INT NULL DEFAULT 0,
  `VoteA` INT NULL DEFAULT 0,
  `VoteB` INT NULL DEFAULT 0,
  `PenaltyParty` INT NULL,
  `Confirm` INT NULL DEFAULT 0,
  `RRMesA` VARCHAR(45) NULL,
  `RRMesB` VARCHAR(45) NULL,
  `SumA` INT NULL DEFAULT 1,
  `SumB` INT NULL DEFAULT 0,
  `RRS` INT NULL,
  `Sponsorer` VARCHAR(45) NULL,
  PRIMARY KEY (`idBets`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LB`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LB`.`User` (
  `UserName` VARCHAR(45) NOT NULL,
  `Password` VARCHAR(45) NULL,
  `RRName` VARCHAR(45) NULL,
  `RRPassword` VARCHAR(45) NULL,
  PRIMARY KEY (`UserName`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LB`.`User_has_Bets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LB`.`User_has_Bets` (
  `User_Name` VARCHAR(45) NOT NULL,
  `Bets_idBets` INT NOT NULL,
  `Party` INT NULL DEFAULT 0,
  `UserConfirm` INT NULL DEFAULT 0,
  `Vote` INT NULL DEFAULT 0,
  PRIMARY KEY (`User_Name`, `Bets_idBets`),
  INDEX `fk_User_has_Bets1_Bets1_idx` (`Bets_idBets` ASC),
  INDEX `fk_User_has_Bets1_User1_idx` (`User_Name` ASC),
  CONSTRAINT `fk_User_has_Bets1_User1`
    FOREIGN KEY (`User_Name`)
    REFERENCES `LB`.`User` (`UserName`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Bets1_Bets1`
    FOREIGN KEY (`Bets_idBets`)
    REFERENCES `LB`.`Bets` (`idBets`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `LB` ;

-- -----------------------------------------------------
-- procedure CreateBet
-- -----------------------------------------------------

DELIMITER $$
USE `LB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CreateBet`(IN p_Name VARCHAR(45), 
IN p_PenaltyA VARCHAR(45), 
IN p_PenaltyB VARCHAR(45),
IN p_Introduction VARCHAR(45),
IN p_RRS INT,
IN p_RRMesA VARCHAR(45),
IN p_RRMesB VARCHAR(45),
IN p_UserName VARCHAR(45)

)
    READS SQL DATA
BEGIN
	DECLARE tmp INT;
	INSERT INTO Bets SET
	BetName = p_Name,
	PenaltyA = p_PenaltyA,
	PenaltyB = p_PenaltyB,
	RRS = p_RRS,
	RRMesA = p_RRMesA,
	RRMesB = p_RRMesB,
	Introduction = p_Introduction,
	Sponsorer = p_UserName;

	Select max(idBets) from Bets into tmp;

	INSERT INTO User_has_Bets SET
	User_Name = p_UserName,
	Bets_idBets = tmp,
	Party = 1;
	
	#Party = 1;
    # SELECT FOUND_ROWS() INTO p_film_count;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure QueryBets
-- -----------------------------------------------------

DELIMITER $$
USE `LB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `QueryBets`(
IN p_UserName VARCHAR(45),
IN p_finish int,
IN p_in int

)
    READS SQL DATA
BEGIN
	DECLARE tmp INT;
    

	/*Create temporary table tmptable as 
		Select * From
		(User as A Inner join User_has_Bets as B On A.UserName = B.User_Name
		Inner join Bets As C On B.Bets_idBets = C.idBets) Where finish = 0 Group by idBets;
	*/
	if (p_in = 0) then
		select * from Bets where not exists (
			select * from User_has_Bets 
			where idBets = Bets_idBets And User_Name = p_UserName And Finish = p_finish And UserConfirm = 0);
	else 
		select * from Bets where exists (
			select * from User_has_Bets 
			where idBets = Bets_idBets And User_Name = p_UserName And Finish = p_finish And UserConfirm = 0);
	end if;
	#drop table tmptable;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateConfirm
-- -----------------------------------------------------

DELIMITER $$
USE `LB`$$


CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateConfirm`(
IN p_Confirm int,
IN p_UserName VARCHAR(45),
IN p_idBets int

)
    READS SQL DATA
BEGIN
	DECLARE tmp INT;
	SELECT UserConfirm from User_has_Bets where User_Name = p_UserName And Bets_idBets = p_idBets INTO tmp;
	Update User_has_Bets Set UserConfirm = p_Confirm where User_Name = p_UserName And Bets_idBets = p_idBets;
	if tmp = 0 And p_Confirm = 1 then 
		update Bets SET Confirm = Confirm + 1 Where idBets = p_idBets;
	end if;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateVote
-- -----------------------------------------------------

DELIMITER $$
USE `LB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateVote`(
IN p_Vote int,
IN p_UserName VARCHAR(45),
IN p_idBets int

)
    READS SQL DATA
BEGIN
	DECLARE tmp INT;
	declare s1 int;
	declare s2 int;
	declare s3 int;
	declare s4 int;
	SELECT Vote Into tmp from User_has_Bets where User_Name = p_UserName And Bets_idBets = p_idBets;
	Update User_has_Bets Set Vote = p_Vote where User_Name = p_UserName And Bets_idBets = p_idBets;
	if (tmp != p_Vote) then
		if (tmp = 1) then
			update Bets SET VoteA = VoteA - 1 where idBets = p_idBets;
		else if (tmp = 2) then
				update Bets SET VoteB = VoteB - 1 where idBets = p_idBets;
			end if;
		end if;
		if (p_Vote = 1) then
			update Bets SET VoteA = VoteA + 1 where idBets = p_idBets;
		else if (p_Vote = 2) then
				update Bets SET VoteB = VoteB + 1 where idBets = p_idBets;
			end if;
		end if;
		Create temporary table bb as
		(SELECT * from Bets where idBets = p_idBets);
		
		Select Sum into s1 from bb;
		select VoteA into s2 from bb;
		select VoteB into s3 from bb;
		
		if (s1 = s2 + s3) then
			if (s2 > s3) then Set s4 = 1; end if;
			if (s2 < s3) then set s4 = 2; end if;
			if (s2 = s3) then set s4 = 0; end if;
			update Bets Set finish = 1, PenaltyParty = s4 where idBets = p_idBets;
		end if;
		#update Bets Set SumB = 100*s1+10*s2+s3 where idBets = p_idBets;
		drop table bb;
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RenRenFa
-- -----------------------------------------------------

DELIMITER $$
USE `LB`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `RenRenFa`(
IN idB Int

)
    READS SQL DATA
BEGIN
	DECLARE tmp1 INT;
    DECLARE tmp2 INT;

	/*Create temporary table tmptable as 
		Select * From
		(User as A Inner join User_has_Bets as B On A.UserName = B.User_Name
		Inner join Bets As C On B.Bets_idBets = C.idBets) Where finish = 0 Group by idBets;
	*/
	#Create temporary table tmptable as

	Select Finish into tmp1 from Bets where idBets = idB;
	Select RRS into tmp2 from Bets where idBets = idB;
	if (tmp1 = 1 And tmp2 = 1) then
		Select PenaltyParty into tmp1 from Bets where idBets = idB;
		Select * from (User as A Inner join User_has_Bets as B On A.UserName = B.User_Name
		Inner join Bets As C On B.Bets_idBets = C.idBets) where UserName in (select User_Name from User_has_Bets 
		where Bets_idBets = idB  And Party = 3 - tmp1) And idBets = idB;
		Update Bets SET RRS = 0 Where idBets = idB;
	end if;
	#drop table tmptable;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
